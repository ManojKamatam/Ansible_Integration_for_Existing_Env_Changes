pipeline {
    agent any

    environment {
        S3_BUCKET = 'my-s3-bucket-for-jenkins-pipeline-setup'
        S3_KEY = 'my-app.zip'
        ENVIRONMENT_NAME = 'Linux-based-web-application-env'
        APPLICATION_NAME = 'linux-based-web-application'
        AWS_REGION = 'us-east-1'
        SECRET_NAME = 'secret-jenkins-access'
        VERSION_LABEL = "app-version-${BUILD_NUMBER}"
    }

    stages {
        stage('Retrieve AWS Credentials from Secrets Manager') {
            steps {
                script {
                    def secretValue = sh(script: "aws secretsmanager get-secret-value --secret-id ${SECRET_NAME} --query 'SecretString' --output text --region ${AWS_REGION}", returnStdout: true).trim()
                    def jsonSlurper = new groovy.json.JsonSlurper()
                    def credentials = jsonSlurper.parseText(secretValue)
                    env.AWS_ACCESS_KEY_ID = credentials.keySet().iterator().next()
                    env.AWS_SECRET_ACCESS_KEY = credentials[env.AWS_ACCESS_KEY_ID]
                }
            }
        }

        stage('Install Ansible Collections') {
            steps {
                sh "ansible-galaxy collection install community.aws"
            }
        }

        stage('Checkout Repository') {
            steps {
                git url: 'https://github.com/ManojKamatam/Ansible_Integration_for_Existing_Env_Changes.git', branch: 'main'
            }
        }

        stage('Wait for Environment Readiness') {
            steps {
                script {
                    def isReady = false
                    while (!isReady) {
                        def result = sh(script: """
                            aws elasticbeanstalk describe-environments --application-name ${APPLICATION_NAME} \
                            --environment-names ${ENVIRONMENT_NAME} --query 'Environments[0].Status' --output text --region ${AWS_REGION}
                        """, returnStdout: true).trim()
                        if (result == 'Ready') {
                            isReady = true
                        } else {
                            echo "Waiting for environment to be ready..."
                            sleep(time: 60, unit: 'SECONDS') // Wait 60 seconds before checking again
                        }
                    }
                }
            }
        }

        stage('Set Rolling Deployments for Application') {
            steps {
                withEnv(["AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}", "AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}", "AWS_REGION=${AWS_REGION}"]) {
                    sh """
                        aws elasticbeanstalk update-environment \
                        --application-name ${APPLICATION_NAME} \
                        --environment-name ${ENVIRONMENT_NAME} \
                        --option-settings Namespace=aws:elasticbeanstalk:command,OptionName=DeploymentPolicy,Value=Rolling \
                        --region ${AWS_REGION}
                    """
                }
            }
        }

        stage('Wait for Environment Readiness After Setting Rolling Deployment') {
            steps {
                script {
                    def isReady = false
                    while (!isReady) {
                        def result = sh(script: """
                            aws elasticbeanstalk describe-environments --application-name ${APPLICATION_NAME} \
                            --environment-names ${ENVIRONMENT_NAME} --query 'Environments[0].Status' --output text --region ${AWS_REGION}
                        """, returnStdout: true).trim()
                        if (result == 'Ready') {
                            isReady = true
                        } else {
                            echo "Waiting for environment to be ready..."
                            sleep(time: 60, unit: 'SECONDS') // Wait 60 seconds before checking again
                        }
                    }
                }
            }
        }

        stage('Deploy Application Version to Elastic Beanstalk') {
            steps {
                withEnv(["AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}", "AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}"]) {
                    sh """
                        aws elasticbeanstalk create-application-version --application-name ${APPLICATION_NAME} \
                        --version-label ${VERSION_LABEL} --source-bundle S3Bucket=${S3_BUCKET},S3Key=${S3_KEY} \
                        --region ${AWS_REGION}
                    """
                }
            }
        }

        stage('Update Elastic Beanstalk Environment') {
            steps {
                withEnv(["AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}", "AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}"]) {
                    sh """
                        aws elasticbeanstalk update-environment \
                        --application-name ${APPLICATION_NAME} \
                        --environment-name ${ENVIRONMENT_NAME} \
                        --version-label ${VERSION_LABEL} \
                        --region ${AWS_REGION}
                    """
                }
            }
        }

        stage('Set Immutable Deployments for Configuration Updates') {
            steps {
                withEnv(["AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}", "AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}", "AWS_REGION=${AWS_REGION}"]) {
                    sh """
                        aws elasticbeanstalk update-environment \
                        --application-name ${APPLICATION_NAME} \
                        --environment-name ${ENVIRONMENT_NAME} \
                        --option-settings Namespace=aws:elasticbeanstalk:command,OptionName=DeploymentPolicy,Value=Immutable \
                        --region ${AWS_REGION}
                    """
                }
            }
        }

        stage('Change Instance Type with Ansible') {
            steps {
                withEnv(["AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}", "AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}", "AWS_REGION=${AWS_REGION}"]) {
                    sh """
                        ansible-playbook -i localhost, ansible/enable_immutable_updates.yml \
                        --extra-vars "application_name=${APPLICATION_NAME} environment_name=${ENVIRONMENT_NAME} region=${AWS_REGION}"
                    """
                }
            }
        }

        stage('Change EBS Volume Type with Ansible') {
            steps {
                withEnv(["AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID}", "AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY}", "AWS_REGION=${AWS_REGION}"]) {
                    sh """
                        ansible-playbook -i localhost, ansible/change_ebs_volume_type.yml \
                        --extra-vars "environment_name=${ENVIRONMENT_NAME} region=${AWS_REGION}"
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Deployment process completed.'
        }
    }
}
